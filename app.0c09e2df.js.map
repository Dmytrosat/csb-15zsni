{"version":3,"sources":["Canvas.js","app.js"],"names":["Canvas","ctx","_classCallCheck","_createClass","key","value","shapes","_this","clear","forEach","shape","opacity","globalAlpha","type","renderCircle","renderSquare","console","log","concat","radius","size","beginPath","arc","x","y","Math","PI","fillStyle","color","fill","halfSize","fillRect","clearRect","canvas","width","height","exports","_Canvas","require","state","toolbarElement","document","querySelector","sizeOutputElement","shapeElements","querySelectorAll","canvasElement","getContext","handleToolbarInput","event","name","target","valueAsNumber","updateToolbarUI","handleCanvasClick","canvasRect","getBoundingClientRect","clientX","left","clientY","top","newShape","push","render","handleCanvasMouseMove","tempShape","handlePageResize","setCanvasSize","textContent","shapeElement","style","backgroundColor","addEventListener","window"],"mappings":"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","file":"app.0c09e2df.js","sourceRoot":"..","sourcesContent":["export class Canvas {\n  constructor(ctx) {\n    this.ctx = ctx;\n  }\n\n  render(shapes) {\n    this.clear();\n\n    shapes.forEach((shape) => {\n      if (shape.opacity) {\n        this.ctx.globalAlpha = 0.5;\n      }\n\n      switch (shape.type) {\n        case \"circle\": {\n          this.renderCircle(shape);\n          break;\n        }\n\n        case \"square\": {\n          this.renderSquare(shape);\n          break;\n        }\n\n        default: {\n          console.log(`Unknown shape ${shape.type}`);\n        }\n      }\n    });\n\n    this.ctx.globalAlpha = 1;\n  }\n\n  renderCircle(shape) {\n    const radius = shape.size / 2;\n\n    this.ctx.beginPath();\n    this.ctx.arc(shape.x, shape.y, radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = shape.color;\n    this.ctx.fill();\n  }\n\n  renderSquare(shape) {\n    const halfSize = shape.size / 2;\n\n    this.ctx.fillStyle = shape.color;\n    this.ctx.fillRect(\n      shape.x - halfSize,\n      shape.y - halfSize,\n      shape.size,\n      shape.size\n    );\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n}\n","import { Canvas } from \"./Canvas.js\";\n\nconst state = {\n  color: \"#00ff00\",\n  size: 50,\n  shape: \"circle\"\n};\nconst shapes = [];\n\nconst toolbarElement = document.querySelector(\"#toolbar\");\nconst sizeOutputElement = document.querySelector(\"#size-output\");\nconst shapeElements = document.querySelectorAll(\".shape\");\nconst canvasElement = document.querySelector(\"#canvas\");\n\nconst canvas = new Canvas(canvasElement.getContext(\"2d\"));\n\ntoolbarElement.addEventListener(\"input\", handleToolbarInput);\ncanvasElement.addEventListener(\"click\", handleCanvasClick);\ncanvasElement.addEventListener(\"mousemove\", handleCanvasMouseMove);\nwindow.addEventListener(\"resize\", handlePageResize);\n\nupdateToolbarUI();\nsetCanvasSize();\n\nfunction handleToolbarInput(event) {\n  const name = event.target.name;\n  const value =\n    event.target.type === \"range\"\n      ? event.target.valueAsNumber\n      : event.target.value;\n\n  state[name] = value;\n\n  updateToolbarUI();\n}\n\nfunction handleCanvasClick(event) {\n  const canvasRect = canvasElement.getBoundingClientRect();\n  const x = event.clientX - canvasRect.left;\n  const y = event.clientY - canvasRect.top;\n\n  const newShape = {\n    type: state.shape,\n    size: state.size,\n    color: state.color,\n    x,\n    y\n  };\n\n  shapes.push(newShape);\n  canvas.render(shapes);\n}\n\nfunction handleCanvasMouseMove(event) {\n  const canvasRect = canvasElement.getBoundingClientRect();\n  const x = event.clientX - canvasRect.left;\n  const y = event.clientY - canvasRect.top;\n\n  const tempShape = {\n    type: state.shape,\n    size: state.size,\n    color: state.color,\n    opacity: 0.5,\n    x,\n    y\n  };\n\n  canvas.render([...shapes, tempShape]);\n}\n\nfunction handlePageResize() {\n  setCanvasSize();\n}\n\nfunction updateToolbarUI() {\n  sizeOutputElement.textContent = state.size;\n\n  shapeElements.forEach((shapeElement) => {\n    shapeElement.style.backgroundColor = state.color;\n  });\n}\n\nfunction setCanvasSize() {\n  const canvasRect = canvasElement.getBoundingClientRect();\n\n  canvasElement.style.width = `${canvasRect.width}px`;\n  canvasElement.style.height = `${canvasRect.height}px`;\n  canvasElement.width = canvasRect.width;\n  canvasElement.height = canvasRect.height;\n}\n"]}